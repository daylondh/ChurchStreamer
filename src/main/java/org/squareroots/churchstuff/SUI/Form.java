package org.squareroots.churchstuff.SUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.squareroots.churchstuff.calendar.LiturgicalCalendar;

import javax.swing.*;
import java.awt.*;

public class Form {
    private JFrame frame;
    private JPanel panel1;
    private JButton startStreamingButton;
    private JTextField titleField;
    private JLabel label1;
    private JLabel label2;
    private JLabel label3;
    private JButton StartRecordingButton;
    private JCheckBox darkThemeCheckBox;
    private JCheckBox UploadToYTCheckBox;
    private JLabel noticeLabel;
    private JButton openLogsButton;
    private JComboBox privacyComboBox;
    private JCheckBox StreamingEnabled;


    public Form(LiturgicalCalendar calendar) {
        frame = new JFrame("Church Streamer");
        frame.setAlwaysOnTop(true);
        panel1.setBounds(700, 700, 700, 700);
        frame.setBounds(panel1.getBounds());
        frame.add(panel1);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        applyTheme();

    }


    private void applyTheme() {
        panel1.setOpaque(true);
        label1.setOpaque(true);
        label2.setOpaque(true);
        label3.setOpaque(true);
        panel1.setBackground(Color.darkGray);
        label1.setBackground(Color.darkGray);
        label1.setForeground(Color.gray);
        label1.setFont(new Font("Arial", Font.PLAIN, 25));
        label2.setBackground(Color.darkGray);
        label2.setForeground(Color.gray);
        label2.setFont(new Font("Arial", Font.PLAIN, 25));
        label3.setBackground(Color.darkGray);
        label3.setForeground(Color.gray);
        label3.setFont(new Font("Arial", Font.PLAIN, 25));
        StartRecordingButton.setBackground(new Color(0, 0, 80));
        titleField.setBackground(Color.gray);
        titleField.setForeground(Color.black);
        titleField.setFont(new Font("Arial", Font.PLAIN, 25));
        startStreamingButton.setBackground(new Color(0, 0, 80));

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setForeground(new Color(-1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(21, 7, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setForeground(new Color(-1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        panel1.add(panel2, gbc);
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Enter Service Title:");
        label1.setVerticalAlignment(3);
        label1.setVerticalTextPosition(3);
        panel2.add(label1, new GridConstraints(4, 1, 1, 6, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        titleField = new JTextField();
        titleField.setForeground(new Color(-1));
        titleField.setHorizontalAlignment(0);
        panel2.add(titleField, new GridConstraints(5, 1, 1, 6, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        label2 = new JLabel();
        label2.setText("If you have any problems, please contact:");
        panel2.add(label2, new GridConstraints(6, 1, 1, 5, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel2.add(spacer3, new GridConstraints(7, 0, 8, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        label3 = new JLabel();
        label3.setHorizontalTextPosition(0);
        label3.setText("Alex or Daylond Hooper, (937) 929-0939 or (937) 270-9432");
        panel2.add(label3, new GridConstraints(7, 1, 1, 6, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel2.add(spacer4, new GridConstraints(8, 1, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        darkThemeCheckBox = new JCheckBox();
        darkThemeCheckBox.setSelected(false);
        darkThemeCheckBox.setText("Dark Theme");
        panel2.add(darkThemeCheckBox, new GridConstraints(9, 1, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openLogsButton = new JButton();
        openLogsButton.setText("Open Logs");
        panel2.add(openLogsButton, new GridConstraints(10, 1, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        privacyComboBox = new JComboBox();
        privacyComboBox.setEditable(false);
        panel2.add(privacyComboBox, new GridConstraints(14, 1, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        StreamingEnabled = new JCheckBox();
        StreamingEnabled.setText("Enable Streaming");
        panel2.add(StreamingEnabled, new GridConstraints(15, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        panel2.add(spacer5, new GridConstraints(16, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        StartRecordingButton = new JButton();
        StartRecordingButton.setForeground(new Color(-1));
        StartRecordingButton.setHideActionText(true);
        StartRecordingButton.setText("Click To Start Recording");
        panel2.add(StartRecordingButton, new GridConstraints(16, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(0, -1), null, 0, false));
        UploadToYTCheckBox = new JCheckBox();
        UploadToYTCheckBox.setText("Upload To Youtube Once Complete");
        panel2.add(UploadToYTCheckBox, new GridConstraints(16, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        panel2.add(spacer6, new GridConstraints(16, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        noticeLabel = new JLabel();
        noticeLabel.setForeground(new Color(-65515));
        noticeLabel.setText("Make sure that OBS is set to record in FLV format!");
        panel2.add(noticeLabel, new GridConstraints(17, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startStreamingButton = new JButton();
        startStreamingButton.setBackground(new Color(-12566207));
        startStreamingButton.setEnabled(true);
        Font startStreamingButtonFont = this.$$$getFont$$$(null, Font.BOLD, -1, startStreamingButton.getFont());
        if (startStreamingButtonFont != null) startStreamingButton.setFont(startStreamingButtonFont);
        startStreamingButton.setForeground(new Color(-1));
        startStreamingButton.setSelected(false);
        startStreamingButton.setText("Click To Start Streaming");
        startStreamingButton.setVisible(true);
        panel2.add(startStreamingButton, new GridConstraints(18, 1, 3, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        panel2.add(spacer7, new GridConstraints(20, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
