package org.squareroots.churchstuff.SUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.squareroots.churchstuff.streamer.ObsHandler;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class UI {
    //Ui stuffs
    private JFrame frame;
    JPanel panel1;
    private JPanel mainPanel;
    private JButton startStreamingButton;
    private JTextField titleField;
    private JLabel label1;
    private JLabel label2;
    private JLabel label3;
    private JButton startRecordingButton;
    private JButton changeUploadDateButton;

    boolean isStreaming;
    boolean isRecording;

    public UI() {
        frame = new JFrame("Church Streamer");
        frame.setAlwaysOnTop(true);
        frame.add(mainPanel);
        frame.setVisible(true);
        frame.setBounds(700, 700, 700, 700);
        frame.setLocationRelativeTo(null);
        applyThemes(true);
        assignClickListeners();
    }

    private void assignClickListeners() {
        startRecordingButton.addActionListener(e -> toggleRecording());

    }

    private void toggleRecording() {
        if (isRecording) {
            isRecording = false;

        }
    }


    private void applyThemes(boolean isDark) { //Applies the theme corresponding with the boolean isDark.
        if (isDark) {
            mainPanel.setOpaque(true);

            label1.setOpaque(true);
            label2.setOpaque(true);
            label3.setOpaque(true);
            mainPanel.setBackground(Color.darkGray);
            label1.setBackground(Color.darkGray);
            label1.setForeground(Color.gray);
            label1.setFont(new Font("Arial", Font.PLAIN, 25));
            label2.setBackground(Color.darkGray);
            label2.setForeground(Color.gray);
            label2.setFont(new Font("Arial", Font.PLAIN, 25));
            label3.setBackground(Color.darkGray);
            label3.setForeground(Color.gray);
            label3.setFont(new Font("Arial", Font.PLAIN, 25));
            startRecordingButton.setBackground(new Color(0, 0, 80));
            titleField.setBackground(Color.gray);
            titleField.setForeground(Color.black);
            titleField.setFont(new Font("Arial", Font.PLAIN, 25));
            startStreamingButton.setBackground(new Color(0, 0, 80));
        }
        if (!isDark) {
            mainPanel.setOpaque(false);
            label1.setOpaque(false);
            label2.setOpaque(false);
            label3.setOpaque(false);
            mainPanel.setBackground(Color.WHITE);
            label1.setBackground(Color.white);
            label1.setFont(new Font("Arial", Font.PLAIN, 25));
            label2.setBackground(Color.white);
            label2.setFont(new Font("Arial", Font.PLAIN, 25));
            label3.setBackground(Color.white);
            label3.setFont(new Font("Arial", Font.PLAIN, 25));
            startRecordingButton.setBackground(new Color(0, 0, 80));
            titleField.setBackground(Color.gray);
            titleField.setFont(new Font("Arial", Font.PLAIN, 25));
            startStreamingButton.setBackground(new Color(0, 0, 80));
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setEnabled(false);
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(10, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setForeground(new Color(-1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel1.add(mainPanel, gbc);
        label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Enter Service Title:");
        label1.setVerticalAlignment(3);
        label1.setVerticalTextPosition(3);
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        titleField = new JTextField();
        titleField.setForeground(new Color(-1));
        titleField.setHorizontalAlignment(0);
        mainPanel.add(titleField, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        label2 = new JLabel();
        label2.setText("If you have any problems, please contact:");
        mainPanel.add(label2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label3 = new JLabel();
        label3.setHorizontalTextPosition(0);
        label3.setText("Alex or Daylond Hooper, (937) 929-0939 or (937) 270-9432");
        mainPanel.add(label3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startRecordingButton = new JButton();
        startRecordingButton.setForeground(new Color(-1));
        startRecordingButton.setText("Start Recording");
        mainPanel.add(startRecordingButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startStreamingButton = new JButton();
        startStreamingButton.setBackground(new Color(-12566207));
        startStreamingButton.setEnabled(true);
        Font startStreamingButtonFont = this.$$$getFont$$$(null, Font.BOLD, -1, startStreamingButton.getFont());
        if (startStreamingButtonFont != null) startStreamingButton.setFont(startStreamingButtonFont);
        startStreamingButton.setForeground(new Color(-1));
        startStreamingButton.setSelected(false);
        startStreamingButton.setText("Click To Start Streaming");
        startStreamingButton.setVisible(true);
        mainPanel.add(startStreamingButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        mainPanel.add(panel2, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        changeUploadDateButton = new JButton();
        changeUploadDateButton.setText("Change Upload Date");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(changeUploadDateButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
